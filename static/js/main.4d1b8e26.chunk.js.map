{"version":3,"sources":["components/SearchBar.jsx","components/AddMovie.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/MovieLibrary.jsx","components/Header.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","this","props","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","data-testid","htmlFor","value","onChange","type","checked","React","Component","AddMovie","handleChange","bind","handleClick","state","subtitle","title","imagePath","storyline","rating","genre","event","target","name","setState","onClick","Rating","className","MovieCard","movie","alt","src","MovieList","movies","map","key","MovieLibrary","filterSearchTextChange","filterMovies","filter","toLowerCase","includes","Header","bookmarked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d1b8e26.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class SearchBar extends React.Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\">\n        <label data-testid=\"text-input-label\" htmlFor=\"text-input\">\n          Inclui o texto:\n          <input\n            data-testid=\"text-input\"\n            value={searchText}\n            onChange={onSearchTextChange}\n          />\n        </label>\n        <label data-testid=\"checkbox-input-label\" htmlFor=\"checkbox-input\">\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            checked={bookmarkedOnly}\n            onChange={onBookmarkedChange}\n            data-testid=\"checkbox-input\"\n          />\n        </label>\n        <label data-testid=\"select-input-label\" htmlFor=\"select-input\">\n          Filtrar por gênero\n          <select\n            value={selectedGenre}\n            data-testid=\"select-input\"\n            onChange={onSelectedGenreChange}\n          >\n            <option value=\"\" data-testid=\"select-option\">\n              Todos\n            </option>\n            <option value=\"action\" data-testid=\"select-option\">\n              Ação\n            </option>\n            <option value=\"comedy\" data-testid=\"select-option\">\n              Comédia\n            </option>\n            <option value=\"thriller\" data-testid=\"select-option\">\n              Suspense\n            </option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class AddMovie extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  render() {\n    const {\n      title,\n      subtitle,\n      imagePath,\n      storyline,\n      rating,\n      genre,\n    } = this.state;\n    return (\n      <form data-testid=\"add-movie-form\">\n        <label htmlFor=\"title\" data-testid=\"title-input-label\">\n          {' '}\nTítulo\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            onChange={this.handleChange}\n            data-testid=\"title-input\"\n          />\n        </label>\n        <label htmlFor=\"subtitle\" data-testid=\"subtitle-input-label\">\n          {' '}\nSubtítulo\n          <input\n            type=\"text\"\n            name=\"subtitle\"\n            value={subtitle}\n            onChange={this.handleChange}\n            data-testid=\"subtitle-input\"\n          />\n        </label>\n        <label htmlFor=\"image\" data-testid=\"image-input-label\">\n          {' '}\nImagem\n          <input\n            type=\"text\"\n            name=\"imagePath\"\n            value={imagePath}\n            onChange={this.handleChange}\n            data-testid=\"image-input\"\n          />\n        </label>\n        <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\n          {' '}\nSinopse\n          <textarea\n            type=\"text\"\n            name=\"storyline\"\n            value={storyline}\n            onChange={this.handleChange}\n            data-testid=\"storyline-input\"\n          />\n        </label>\n        <label htmlFor=\"rating\" data-testid=\"rating-input-label\">\n          {' '}\nAvaliação\n          <input\n            type=\"number\"\n            name=\"rating\"\n            value={rating}\n            onChange={this.handleChange}\n            data-testid=\"rating-input\"\n          />\n        </label>\n        <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\n          {' '}\nGênero\n          <select\n            name=\"genre\"\n            value={genre}\n            onChange={this.handleChange}\n            data-testid=\"genre-input\"\n          >\n            <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n            <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n        <button\n          data-testid=\"send-button\"\n          type=\"button\"\n          onClick={this.handleClick}\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: PropTypes.func.isRequired };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number.isRequired };\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const {\n      title,\n      subtitle,\n      storyline,\n      rating,\n      imagePath,\n    } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={rating} />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\nimport MovieList from './MovieList';\n\nexport default class MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSearchTextChange = this.onSearchTextChange.bind(this);\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n  }\n\n  onSearchTextChange(event) {\n    const { value } = event.target;\n    this.setState({ searchText: value }, () => {\n      this.filterSearchTextChange();\n    });\n  }\n\n  filterSearchTextChange() {\n    const { searchText } = this.state;\n    const { movies } = this.props;\n    const filterMovies = movies\n      .filter(({ title, subtitle, storyline }) => title\n        .toLowerCase().includes((searchText.toLowerCase())\n    || subtitle.toLowerCase().includes(searchText.toLowerCase())\n    || storyline.toLowerCase().includes(searchText.toLowerCase())));\n    this.setState({ movies: filterMovies });\n  }\n\n  render() {\n    const { movies, searchText } = this.state;\n    return (\n      <div>\n        <SearchBar\n          searchText={searchText}\n          onSearchTextChange={this.onSearchTextChange}\n        />\n        <MovieList\n          movies={movies}\n        />\n        <AddMovie />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = { movies: PropTypes.string.isRequired };\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\nimport MovieLibrary from './components/MovieLibrary';\nimport Header from './components/Header';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={movies} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}